cubes:
  - name: visits
    sql_table: PUBLIC.VISITS
    data_source: default

    joins:
      - name: branches
        sql: "{CUBE.branch_id} = {branches.branch_id}"
        relationship: many_to_one

      - name: clients
        sql: "{CUBE.client_id} = {clients.client_id}"
        relationship: many_to_one

      - name: caregiver_visits
        sql: |
          {CUBE.visit_id} = {caregiver_visits.visit_id}
          and {CUBE.branch_id} = {caregiver_visits.branch_id}
          and {branches.branch_id} = {caregiver_visits.branch_id}
        relationship: one_to_many

    dimensions:

      - name: visit_id
        sql: VISIT_ID
        type: string
        primary_key: true

      - name: visit_date
        sql: VISIT_DATE
        type: time

      - name: client_id
        sql: CARE_RECIPIENT_ID
        type: string

      - name: branch_id
        sql: AGENCY_ID
        type: string

      - name: visit_scheduled
        sql: VISIT_SCHEDULED = 1
        type: boolean

      - name: visit_reported
        sql: VISIT_COMPLETED = 1
        type: boolean

      - name: visit_cancelled
        sql: |
          case when VISIT_CANCELLED = 1 then True
          when VISIT_CANCELLED = 0 then False
          else null end
        type: boolean

    measures:
      - name: count
        type: count

      - name: scheduled_visits
        type: count_distinct
        sql: VISIT_ID
        filters:
          - sql: VISIT_SCHEDULED = 1 and coalesce({CUBE.visit_cancelled}, False) = False

      - name: reported_visits
        type: count_distinct
        sql: VISIT_ID
        filters:
          - sql: VISIT_COMPLETED = 1

      - name: scheduled_visits_reported_count
        type: count
        filters:
          - sql: VISIT_SCHEDULED = 1 and VISIT_COMPLETED = 1 and coalesce({CUBE.visit_cancelled}, False) = False

      - name: percentage_of_scheduled_visits_reported
        type: number
        sql: |
          {CUBE.scheduled_visits_reported_count} / nullif({CUBE.scheduled_visits}, 0)

      - name: reported_visits_starting_within_15_mins_of_schedule
        type: count_distinct
        sql: VISIT_ID
        filters:
          - sql: VISIT_COMPLETED = 1 AND STARTED_WITHIN_15MINS_OF_SCHEDULE = 1

      - name: percentage_of_reported_visits_starting_within_15_mins
        type: number
        sql: |
          {CUBE.reported_visits_starting_within_15_mins_of_schedule} * 1.0 / nullif({CUBE.scheduled_visits_reported_count}, 0)

      - name: total_reported_visit_hours
        type: sum
        sql: REPORTED_DURATION_MINS / 60
        filters:
          - sql: VISIT_COMPLETED = 1

      - name: total_scheduled_visit_hours
        type: sum
        sql: SCHEDULED_DURATION_MINS / 60
        filters:
          - sql: VISIT_SCHEDULED = 1 and coalesce(VISIT_CANCELLED, False) = False

      - name: percentage_of_scheduled_hours_delivered
        type: number
        sql: |
          {CUBE.total_reported_visit_hours} * 1.0 / nullif({CUBE.total_scheduled_visit_hours}, 0)

    pre_aggregations:
      # Pre-aggregation definitions go here.
      # Learn more in the documentation: https://cube.dev/docs/caching/pre-aggregations/getting-started

